.text
.org 0
main:
    li      a0, 5      # Load argument a0 = 5
    jal     ra, factorial  # Jump to factorial function
    ecall   3          # Terminate program

factorial:
    addi    sp, sp, -2  # Allocate stack space
    sw      ra, 0(sp)   # Save return address

    li      t0, 1       # Load 1 into t0
    beq     a0, t0, base_case  # If a0 == 1, return 1

    addi    a0, a0, -1  # Decrement a0
    jal     ra, factorial  # Recursive call

base_case:
    lw      ra, 0(sp)   # Restore return address
    addi    sp, sp, 2   # Deallocate stack space
    ret                 # Return