Line   Address   Machine Code    Source
-----------------------------------------------------
   1                          .org 0x0000
   2                          .text
   3   0x0000                  start:
   4   0x0000   15B9             li   a0, 10             ; I‑type: load immediate 10 into a0 (reg 6)
   5   0x0002   29F9             li   a1, 20             ; I‑type: load immediate 20 into a1 (reg 7)
   6   0x0004   0F80             add  a0, a1             ; R‑type: a0 = a0 + a1
   7   0x0006   1F80             sub  a0, a1             ; R‑type: a0 = a0 - a1
   8   0x0008   2B98             sll  a0, t1             ; R‑type: a0 = a0 << t1
   9   0x000A   4B98             srl  a0, t1             ; R‑type: logical shift right
  10   0x000C   8B98             sra  a0, t1             ; R‑type: arithmetic shift right
  11   0x000E   0047             ecall 1
  12   0x0010   1FA0             or   a0, a1             ; R‑type: a0 = a0 | a1
  13   0x0012   0FA8             and  a0, a1             ; R‑type: a0 = a0 & a1
  14   0x0014   0FB0             xor  a0, a1             ; R‑type: a0 = a0 ^ a1
  15   0x0016   0FB8             mv   a0, a1             ; R‑type: a0 = a1
  16   0x0018   4180             jr   a0                ; R‑type: jump register (single operand; reg2 defaults to a0)
  17   0x001A   8180             jalr a0                ; R‑type: jump and link register (single operand)
  18   0x001C   0B81             addi a0, 5             ; I‑type: a0 = a0 + 5
  19   0x001E   0F89             slti a0, 7             ; I‑type: set a0 = (a0 < 7) ? 1 : 0
  20   0x0020   0F91             sltui a0, 7            ; I‑type: unsigned version
  21   0x0022   2399             slli a0, 1             ; I‑type: shift left immediate
  22   0x0024   4399             srli a0, 1             ; I‑type: logical shift right immediate
  23   0x0026   8399             srai a0, 1             ; I‑type: arithmetic shift right immediate
  24   0x0028   07A1             ori  a0, 0x03         ; I‑type: a0 = a0 | 0x03
  25   0x002A   1FA9             andi a0, 0x0F         ; I‑type: a0 = a0 & 0x0F
  26   0x002C   0BB1             xori a0, 0x05         ; I‑type: a0 = a0 ^ 0x05
  27   0x002E                  
  28   0x002E                      ; Branch instructions with targets placed immediately afterward
  29   0x002E   0F82             beq  a0, a1, branch_equal       ; B‑type: branch if equal
  30   0x0030                  branch_equal:
  31   0x0030   0239             li   t0, 1                     ; I‑type: set t0 (reg 0) to 1
  32   0x0032                  
  33   0x0032   0F8A             bne  a0, a1, branch_notequal    ; B‑type: branch if not equal
  34   0x0034                  branch_notequal:
  35   0x0034   0439             li   t0, 2                     ; I‑type: set t0 to 2
  36   0x0036                  
  37   0x0036   0FA2             blt  a0, a1, branch_less        ; B‑type: branch if less than
  38   0x0038                  branch_less:
  39   0x0038   0779             li   t1, 3                     ; I‑type: set t1 (reg 5) to 3
  40   0x003A                  
  41   0x003A   0FAA             bge  a0, a1, branch_notless     ; B‑type: branch if not less than
  42   0x003C                  branch_notless:
  43   0x003C   0979             li   t1, 4                     ; I‑type: set t1 to 4
  44   0x003E                  
  45   0x003E   0FB2             bltu a0, a1, branch_lessu       ; B‑type: branch if less than (unsigned)
  46   0x0040                  branch_lessu:
  47   0x0040   0BB9             li   a0, 5                     ; I‑type: set a0 to 5
  48   0x0042                  
  49   0x0042   0FBA             bgeu a0, a1, branch_notlessu    ; B‑type: branch if not less than (unsigned)
  50   0x0044                  branch_notlessu:
  51   0x0044   0DF9             li   a1, 6                     ; I‑type: set a1 to 6
  52   0x0046                  
  53   0x0046   1192             bz   a0, branch_zero            ; B‑type: branch if a0 is zero (single register)
  54   0x0048                  branch_zero:
  55   0x0048   0EF9             li   s0, 7                     ; I‑type: set s0 (reg 3) to 7
  56   0x004A                  
  57   0x004A   11DA             bnz  a1, branch_nonzero         ; B‑type: branch if a1 is nonzero (single register)
  58   0x004C                  branch_nonzero:
  59   0x004C   1139             li   s1, 8                     ; I‑type: set s1 (reg 4) to 8
  60   0x004E                  
  61   0x004E   002D             j    loop                      ; J‑type: jump (PC‑relative)
  62   0x0050   807D             jal  ra, subroutine                ; J‑type: jump and link
  63   0x0052                  
  64   0x0052   68DE             lui  s0, 0x1A3                ; U‑type: load upper immediate into s0 (reg 3)
  65   0x0054   BD06             auipc s1, 0x0F0               ; U‑type: add upper immediate to PC into s1 (reg 4)
  66   0x0056   0007             ecall 0                      ; SYS‑type: system call with svc=0
  67   0x0058                  
  68   0x0058                  loop:
  69   0x0058   0381             addi a0, 1                 ; I‑type: increment a0
  70   0x005A   3F82             beq  a0, a1, end_loop       ; B‑type: branch if a0 equals a1
  71   0x005C   7E35             j    loop                  ; J‑type: jump back to loop
  72   0x005E                  
  73   0x005E                  subroutine:
  74   0x005E   0D80             add  a0, a0                ; R‑type: dummy subroutine (double a0)
  75   0x0060   4040             jr   ra                    ; R‑type: return via jump register
  76   0x0062                  
  77   0x0062                  end_loop:
  78   0x0062   0038             mv   t0, t0                ; R‑type: dummy nop (move t0 to itself)
  79   0x0064                  
  80   0x0064                  .data
  81   0x4000                  .org 0x4000
  82   0x4000                  string:
  83   0x4000   4822 6C65 6F6C 202C 315A 2136 00      .asciiz "Hello, Z16!"       ; Data: null‑terminated string
  84   0x400C                  bytes:
  85   0x400C   01 02 FF 2A      .byte 0x1, 2, 0xFF, 42      ; Data: 4 bytes
  86   0x4010                  words:
  87   0x4010   0064 00C8 0300      .word 100, 200, 0x300       ; Data: 3 words (16‑bit values)
  88   0x4016                  reserved:
  89   0x4016                      .space 16                  ; Data: reserve 16 bytes